swagger: '2.0'
info:
  version: v0.1
  title: API Person
  description: REST API to consult and edit Person data.
  contact:
    name: TRIA Team
    email: TRIA@smals.be

securityDefinitions:
  APIKeyHeader:
    in: header
    type: apiKey
    name: Authorization

security:
  - APIKeyHeader: [ ]

tags:
  - name: person
    description: "Manage information related to a person."

paths:
  /v1/persons:
    get:
      tags:
        - person
      summary: Returns a person summary list
      operationId: getAllPersons
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/Gender'
        - name: firstName
          in: query
          description: First name of a person
          type: string
        - name: lastName
          in: query
          description: Last name of a person
          type: string
          required: true
        - name: bornAfter
          in: query
          description: minimum value for birthdate.
          type: string
          format: date
        - name: bornBefore
          in: query
          description: maximum value for birthdate.
          type: string
          format: date
        - name: page
          in: query
          description: The index of page to be retrieved
          minimum: 0
          default: 0
          type: integer
        - name: pageSize
          in: query
          description: Maximum number of items per page
          default: 10
          minimum: 1
          maximum: 1000
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/PersonSummaryPage'
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    post:
      tags:
        - person
      operationId: createPerson
      summary: Create a person
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: person
          description: person object to create
          in: body
          required: true
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Person'
        - name: type
          description: type of person to create
          in: query
          type: string
          enum:
            - PERSON_WITH_DISABILITY,
            - VALID_PERSON
          required: true
      responses:
        '201':
          description: Created
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Person'
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
  
  /v1/persons/search/{search}:
    get:
      deprecated: true
      summary: 'Search throuhg SSIN, last name, first name and return a list of person'
      produces:
        - application/json
      tags:
        - person
      operationId: searchPersons
      parameters:
        - description: Search Param
          in: path
          minLength: 1
          name: search
          required: true
          type: string
        - default: 0
          description: The index of page to be retrieved
          in: query
          minimum: 0
          name: page
          type: integer
        - default: 10
          description: Maximum number of items per page desired
          in: query
          maximum: 1000
          minimum: 1
          name: pageSize
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/SearchPersonsResponsePageable'
        '204':
          description: No content
        '401':
          description: Unauthorized
        '413':
          description: Payload too large

  /v1/persons/search/advanced:
    post:
      summary: 'Search by SSIN, last name, first name and return a list of persons'
      produces:
        - application/json
      tags:
        - person
      operationId: advancedSearchPersons
      parameters:
        - description: Search Param
          in: body
          name: searchCriteria
          required: true
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/SearchCriteria'
        - default: 0
          description: The index of page to be retrieved
          in: query
          minimum: 0
          name: page
          type: integer
        - default: 10
          description: Maximum number of items per page desired
          in: query
          maximum: 1000
          minimum: 1
          name: pageSize
          type: integer
        - $ref:  'tria-person-administrative-objects.yaml#/parameters/PersonType'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/SearchPersonsResponsePageable'
        '401':
          description: Unauthorized

  /v1/persons/search:
    post:
      tags:
        - person
      summary: Get a person by their ssin
      operationId: getPersonWithDisabilityBySsin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ssin
          in: body
          schema:
            $ref: 'person/identifier/v1/person-identifier-v1.yaml#/definitions/Ssin'
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Person'
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}:
    get:
      tags:
        - person
      summary: Returns a person by id
      operationId: getPersonById
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref:  'tria-person-administrative-objects.yaml#/parameters/Active'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Person'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not Found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    put:
      tags:
        - person
      summary: Update a person
      operationId: updatePerson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: person
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Person'
          required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    patch:
      tags:
        - person
      summary: Update contact info
      operationId: updateContactInfo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: contactInfo
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/ContactInfo'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/belgianAddresses:
    post:
      tags:
        - person
      summary: Create a belgian address of a person
      operationId: createPersonBelgianAddress
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: address
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BelgianAddress'
          required: true
      responses:
        '201':
          description: Created
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/belgianAddresses/{addressId}:
    get:
      tags:
        - person
      summary: Returns a belgian address by id
      operationId: getBelgianAddressById
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/AddressId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BelgianAddress'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not Found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    put:
      tags:
        - person
      summary: Update a belgian address
      operationId: updateBelgianAddress
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/AddressId'
        - name: address
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BelgianAddress'
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BelgianAddress'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/foreignAddresses:
    post:
      tags:
        - person
      summary: Create a foreign address of a person
      operationId: createForeignAddress
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: address
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/ForeignAddress'
          required: true
      responses:
        '201':
          description: Ok
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/foreignAddresses/{addressId}:
    get:
      tags:
        - person
      summary: Returns a foreign address by id
      operationId: getForeignAddressById
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/AddressId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/ForeignAddress'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not Found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    put:
      tags:
        - person
      summary: Update a foreign address
      operationId: updateForeignAddress
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/AddressId'
        - name: address
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/ForeignAddress'
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/ForeignAddress'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/bankAccountHolderValidations:
    get:
      tags:
        - bankAccount
      summary: Retrieve list of bank account holder validations
      operationId: getBankAccountHolderValidations
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
          - $ref: 'tria-person-administrative-objects.yaml#/parameters/BankAccountHolderValidationStatus'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccountHolderValidation'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    post:
      tags:
        - bankAccount
      summary: Create a bank account holder validations
      operationId: createBankAccountHolderValidation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: bankAccountHolderValidation
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccountHolderValidation'
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccountHolderValidation'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/bankAccountHolderValidations/{bankAccountHolderValidationId}:
    put:
      tags:
        - bankAccount
      summary: Update a bank account holder validation
      operationId: updateBankAccountHolderValidation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/BankAccountHolderValidationId'
        - name: bankAccountHolderValidation
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccountHolderValidation'
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccountHolderValidation'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/bankAccounts:
    get:
      tags:
        - bankAccount
      summary: Retrieve history of bank accounts of a person.
      operationId: getBankAccountsByPersonId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'         
    post:
      tags:
        - bankAccount
      summary: Create a bank account of a person
      operationId: createPersonBankAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: bankAccount
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
          required: true
      responses:
        '201':
          description: Created
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/bankAccounts/{bankAccountId}:
    get:
      tags:
        - bankAccount
      summary: Get bank account
      operationId: getBankAccountById
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/BankAccountId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    put:
      tags:
        - bankAccount
      summary: Update a bank account
      operationId: updatePersonBankAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/BankAccountId'
        - name: bankAccount
          in: body
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/BankAccount'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/relations:
    post:
      tags:
        - person
      operationId: createRelation
      summary: Create a relation for a person
      description: |-
        **To create a relation, use only the id field in person. All others fields will be ignored**
        
        ***Example of body:***
        ```
        {
          "type": "LEGAL_REPRESENTATIVE",
          "startDate": "2023-08-11T12:46:25.946Z",
          "endDate" : "2023-08-11T12:46:25.946Z"
          "person": {
            "id": 50000000
          }
        }
        ```
        
        ```
        id: ignored
        type: oneof PARTNER , CONTACT_PERSON , LEGAL_REPRESENTATIVE , PHYSICIAN , CO_PARENT
        startDate: a date-time
        endDate: a date-time
        person:
          id: the id of the person in relation with 
          ...: all other fields are ignored
        ```
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: relation
          in: body
          required: true
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Relation'
      responses:
        '201':
          description: Created
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Relation'
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/relations/{relationId}:
    get:
      tags:
        - person
      summary: Get a relation
      operationId: getRelationById
      description: |-
        ***example of response:***
        ```
        {
          "id": 0,
          "type": "PARTNER",
          "startDate": "2022-11-24T10:07:55.106Z",
          "endDate": "2022-11-24T10:07:55.106Z",
          "person": {
            "id": 0,
            "nihdiNumber": "string",
            "lastName": "string",
            "firstName": "string",
            "gender": "M",
            "birthDate": "2022-11-24",
            "deathDate": "2022-11-24",
            "ssin": "06670469146",
            "title": "MR",
            "civilState": "UNKNOWN",
            "language": "FR",
            "contactInfo": {
              "preferredContactChannel": "LETTER",
              "preferredCorrespondence": "DIPLOMATIC",
              "phone": "string",
              "mobile": "string",
              "email": "string",
              "ehealthBox": "string",
              "sms_allowed": true,
              "ebox_allowed": true
            },
            "address": {
              "belgianAddresses": [
                {
                  ...
                }
              ],
              "foreignAddresses": [
                {
                 ...
                }
              ]
            },
            "bankAccounts": [
              {
                ...
              }
            ],
            "relations": null
            "inscriptions": [
              {
                ...
              }
            ],
            "nationality": "string",
            "disabled": true
          }
        }
        ```

      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/RelationId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Relation'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    put:
      tags:
        - person
      summary: Update a relation
      operationId: updateRelation
      description: |-
        **To update a relation, the field person is ignored. Only startDate,endDate and type will be updated**
        
        ***Example of body:***
        ```
        {
          "type": "LEGAL_REPRESENTATIVE",
          "startDate": "2023-08-11T12:46:25.946Z",
          "endDate: "2023-08-12T12:46:25.946Z",
        }
        ```
        
        ```
          id: ignored, we use the id in url relationId
          type: oneof PARTNER , CONTACT_PERSON , LEGAL_REPRESENTATIVE , PHYSICIAN , CO_PARENT
          startDate: a date-time
          endDate: a date-time
          person: is ignored
        ```
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/RelationId'
        - name: relation
          in: body
          required: true
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Relation'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Relation'
        '400':
          description: Bad request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/inscriptions:
    get:
      tags:
        - person
      summary: Returns list of inscription. Filter possible by code & context
      operationId: getInscriptions
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: context
          in: query
          description: context of inscription
          type: string
        - name: code
          in: query
          description: code of inscription
          type: string
        - name: active
          in: query
          description: return active inscriptions or not
          type: boolean
          required: false
          default: true
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: 'tria-person-administrative-objects.yaml#/definitions/Inscription'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
    post:
      tags:
        - person
      operationId: createInscription
      summary: Create an inscription for a person
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - name: inscription
          in: body
          required: true
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Inscription'
      responses:
        '201':
          description: Created
          headers:
            location:
              type: string
              format: uri
              description: Location of the resource
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Inscription'
        '400':
          description: Bad Request
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '409':
          description: Conflict
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'

  /v1/persons/{personId}/inscriptions/{inscriptionId}:
    get:
      tags:
        - person
      summary: Returns an inscription by id
      operationId: getInscriptionById
      produces:
        - application/json
      parameters:
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/PersonId'
        - $ref: 'tria-person-administrative-objects.yaml#/parameters/InscriptionId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: 'tria-person-administrative-objects.yaml#/definitions/Inscription'
        '401':
          description: Unauthorized
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '403':
          description: Forbidden
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '404':
          description: Not Found
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
        '500':
          description: Internal error
          schema:
            $ref: 'problem/v1/problem-v1.yaml#/definitions/Problem'
